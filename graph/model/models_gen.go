// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type Pagination interface {
	IsPagination()
}

type Company struct {
	ID             string                `json:"id"`
	CompanyName    string                `json:"companyName"`
	Representative string                `json:"representative"`
	PhoneNumber    string                `json:"phoneNumber"`
	Departments    *DepertmentPagination `json:"departments"`
	Employees      *EmployeePagination   `json:"employees"`
}

func (Company) IsNode() {}

type CompanyPagination struct {
	PageInfo *PaginationInfo `json:"pageInfo"`
	Nodes    []*Company      `json:"nodes"`
}

func (CompanyPagination) IsPagination() {}

type CreateCompanyInput struct {
	CompanyName    string `json:"companyName"`
	Representative string `json:"representative"`
	PhoneNumber    string `json:"phoneNumber"`
}

type CreateDepartmentInput struct {
	DepartmentName string `json:"departmentName"`
	Email          string `json:"email"`
}

type CreateEmployeeInput struct {
	Name          string `json:"name"`
	Gender        Gender `json:"gender"`
	Email         string `json:"email"`
	DependentsNum int    `json:"dependentsNum"`
	IsManager     bool   `json:"isManager"`
}

type Department struct {
	ID             string              `json:"id"`
	DepartmentName string              `json:"departmentName"`
	Email          string              `json:"email"`
	Company        *Company            `json:"company"`
	Employees      *EmployeePagination `json:"employees"`
}

func (Department) IsNode() {}

type DepertmentPagination struct {
	PageInfo *PaginationInfo `json:"pageInfo"`
	Nodes    []*Department   `json:"nodes"`
}

func (DepertmentPagination) IsPagination() {}

type Employee struct {
	ID            string `json:"id"`
	Name          string `json:"name"`
	Gender        Gender `json:"gender"`
	Email         string `json:"email"`
	LatestLoginAt string `json:"latestLoginAt"`
	//  扶養家族の人数
	DependentsNum int `json:"dependentsNum"`
	//  管理職かどうか
	IsManager  bool        `json:"isManager"`
	Department *Department `json:"department"`
	Company    *Company    `json:"company"`
}

func (Employee) IsNode() {}

type EmployeePagination struct {
	PageInfo *PaginationInfo `json:"pageInfo"`
	Nodes    []*Employee     `json:"nodes"`
}

func (EmployeePagination) IsPagination() {}

type Mutanion struct {
	CreateCompany    *Company    `json:"createCompany"`
	UpdateCompany    *Company    `json:"updateCompany"`
	DeleteCompany    bool        `json:"deleteCompany"`
	CreateDepartment *Department `json:"createDepartment"`
	UpdateDepartment *Department `json:"updateDepartment"`
	DeleteDepartment bool        `json:"deleteDepartment"`
	CreateEmployee   *Employee   `json:"createEmployee"`
	UpdateEmployee   *Employee   `json:"updateEmployee"`
	DeleteEmployee   bool        `json:"deleteEmployee"`
}

type PaginationInfo struct {
	Page             int  `json:"page"`
	PaginationLength int  `json:"paginationLength"`
	HasNextPage      bool `json:"hasNextPage"`
	HasPreviousPage  bool `json:"hasPreviousPage"`
	Count            int  `json:"count"`
	TotalCount       int  `json:"totalCount"`
}

type UpdateCompanyInput struct {
	ID             string `json:"id"`
	CompanyName    string `json:"companyName"`
	Representative string `json:"representative"`
	PhoneNumber    string `json:"phoneNumber"`
}

type UpdateDepartmentInput struct {
	ID             string `json:"id"`
	DepartmentName string `json:"departmentName"`
	Email          string `json:"email"`
}

type UpdateEmployeeInput struct {
	ID            string `json:"id"`
	Name          string `json:"name"`
	Gender        Gender `json:"gender"`
	Email         string `json:"email"`
	DependentsNum int    `json:"dependentsNum"`
	IsManager     bool   `json:"isManager"`
}

type Gender string

const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
